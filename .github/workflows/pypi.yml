name: Build and Publish to PyPI

on:
  push:
    branches: [ master ]
    tags:
      - "v*"
  pull_request:
    branches: [ master ]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
            - os: macos-latest
              arch: arm64
            - os: macos-13
              arch: x86_64
            - os: ubuntu-24.04-arm
              arch: aarch64
            - os: ubuntu-latest
              arch: x86_64
            - os: windows-latest
              arch: AMD64

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Build source package
        run: |
          pip install -U cython setuptools
          python scripts/fetch-vendor.py --config-file scripts/ffmpeg-7.1.json /tmp/vendor
      - name: Upload source package
        uses: actions/upload-artifact@v4
        with:
          name: dist-source
          path: dist/

      - name: Install cibuildwheel and dependencies
        run: |
          python -m pip install --upgrade pip pytest

      - name: Set Minimum MacOS Target
        if: matrix.os == 'macos-13' || matrix.os == 'macos-14'
        run: |
          echo "MACOSX_DEPLOYMENT_TARGET=12.0" >> $GITHUB_ENV
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.2
        with:
          package-dir: python
        env:
          CIBW_ARCHS_MACOS: ${{ matrix.arch }}
          OMPL_BUILD_ARCH: ${{ matrix.arch }}
          CIBW_BUILD: ${{ matrix.pybuilds }}
          CIBW_SKIP: "cp*-manylinux_i686 cp*-musllinux* cp*-win32"
          CIBW_BEFORE_BUILD_LINUX: |
            python scripts/fetch-vendor.py --config-file scripts/ffmpeg-7.1.json /tmp/vendor
            yum install -y cmake make gcc gcc-c++ pkgconfig
            mkdir build
            cd build
            cmake .. -DUSE_CUDA=0 -DCMAKE_BUILD_TYPE=Release
            make
            cp libdecord.so ..
          CIBW_BEFORE_BUILD_MACOS: |
            python scripts/fetch-vendor.py --config-file scripts/ffmpeg-7.1.json /tmp/vendor
            brew install cmake
            mkdir build
            cd build
            cmake .. -DUSE_CUDA=0 -DCMAKE_BUILD_TYPE=Release
            make
            cp libdecord.dylib ..
          CIBW_BEFORE_BUILD_WINDOWS: |
            python scripts\fetch-vendor.py --config-file scripts\ffmpeg-7.1.json C:\cibw\vendor
            choco install cmake ninja -y
            mkdir build
            cd build
            cmake .. -G Ninja -DUSE_CUDA=0 -DCMAKE_BUILD_TYPE=Release
            ninja
            cp decord.dll ..
          CIBW_ENVIRONMENT_LINUX: LD_LIBRARY_PATH=/tmp/vendor/lib:$LD_LIBRARY_PATH PKG_CONFIG_PATH=/tmp/vendor/lib/pkgconfig
          CIBW_ENVIRONMENT_MACOS: PKG_CONFIG_PATH=/tmp/vendor/lib/pkgconfig LDFLAGS=-headerpad_max_install_names
          CIBW_ENVIRONMENT_WINDOWS: INCLUDE=C:\\cibw\\vendor\\include LIB=C:\\cibw\\vendor\\lib PYAV_SKIP_TESTS=unicode_filename
          CIBW_TEST_SKIP: '*'
          CIBW_TEST_COMMAND: python -m pytest {project}/tests/python/unittests -v
          CIBW_TEST_REQUIRES: pytest numpy

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.arch }}
          path: wheelhouse

  publish:
    name: Publish to PyPI
    needs: build_wheels
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    environment:
      name: pypi
      url: https://pypi.org/p/decord
    permissions:
      id-token: write

    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1.12
        with:
          packages_dir: dist/
          skip_existing: true

  testpypi:
    name: Publish to TestPyPI
    needs: build_wheels
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    environment:
      name: testpypi
      url: https://test.pypi.org/p/decord
    permissions:
      id-token: write

    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1.12
        with:
          repository_url: https://test.pypi.org/legacy/
          packages_dir: dist/
          skip_existing: true
